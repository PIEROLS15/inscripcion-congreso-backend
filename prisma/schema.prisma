datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Usuario {
  id                Int            @id @default(autoincrement())
  idTipoDocumentoId String?
  tipoDocumento     TipoDocumento? @relation(fields: [idTipoDocumentoId], references: [id])
  numero            String         @unique
  dni               String         @unique @db.Char(8)
  nombres           String
  apellidos         String
  correoElectronico String         @unique
  celular           String         @db.Char(9)
  creadoEn          DateTime       @default(now())
  actualizadoEn     DateTime       @updatedAt

  inscripciones Inscripcion[]
}

model TipoDocumento {
  id          String    @id
  nombre      String
  abreviatura String    @unique
  usuarios    Usuario[]
}

model TipoInscripcion {
  id                 Int                 @id @default(autoincrement())
  nombre             String //Titulo
  tipoPlanId         Int
  tipoPlan           TipoPlanInscripcion @relation(fields: [tipoPlanId], references: [id])
  precio             Decimal
  institutionalPrice Decimal
  value              String?
  descripcion        String?
  badge              String? // "CON KIT", "SIN KIT", "INCLUYE KIT"
  caracteristicas    Json? //[{"icon": "fa fa-check", "text": "Acceso a todas las conferencias"}]
  activo             Boolean             @default(true)

  inscripciones Inscripcion[]
}

model TipoPlanInscripcion {
  id              Int               @id @default(autoincrement())
  nombre          String            @unique //Estudiante, Profesional, General
  descripcion     String?
  caracteristicas Json? // [{"icon": "fa fa-check", "text": "Acceso a todas las conferencias"}]
  precioDesde     Decimal?
  PlanInscripcion TipoInscripcion[]
}

model Clasificacion {
  id     Int    @id @default(autoincrement())
  nombre String

  inscripciones Inscripcion[]
}

// model MetodoDeposito {
//   id            Int           @id @default(autoincrement())
//   nombre        String        @unique
//   opciones      TipoPago[]
//   inscripciones Inscripcion[]
// }

// model TipoPago {
//   id               Int            @id @default(autoincrement())
//   metodoDepositoId Int
//   metodoDeposito   MetodoDeposito @relation(fields: [metodoDepositoId], references: [id], onDelete: Cascade)

//   nombre String

//   inscripciones Inscripcion[]
// }

model EstadoInscripcion {
  id     Int    @id @default(autoincrement())
  nombre String @unique

  inscripciones Inscripcion[]
}

model Inscripcion {
  id Int @id @default(autoincrement())

  usuarioId Int
  usuario   Usuario @relation(fields: [usuarioId], references: [id], onUpdate: Cascade)

  tipoInscripcionId Int?
  tipoInscripcion   TipoInscripcion? @relation(fields: [tipoInscripcionId], references: [id])

  modalidadDeposito String? // Presencial o Virtual
  bancoSeleccionado String? // Banco donde hizo el deposito
  tipoOperacion     String? // Si es otro tipo de pago inmediatante o interbancario
  billeteraDigital  String? // Si pago con billetera digital

  file            String? // Nombre del archivo
  numeroOperacion String   @unique //Yape, transaccion
  fechaPago       DateTime

  pago                 Decimal //Pago total en soles
  esEmailInstitucional Boolean           @default(false) // Si uso correo institucional
  hasDiscount          Boolean           @default(false) // Si se le aplico un descuento
  descuento            Decimal           @default(0) // El descuento que se le hizo 
  estadoId             Int
  estado               EstadoInscripcion @relation(fields: [estadoId], references: [id])

  creadoEn      DateTime @default(now())
  actualizadoEn DateTime @updatedAt

  //legacy start
  clasificacionId Int?
  clasificacion   Clasificacion? @relation(fields: [clasificacionId], references: [id])
  // metodoDepositoId Int?
  // metodoDeposito   MetodoDeposito? @relation(fields: [metodoDepositoId], references: [id])
  // tipoPagoId       Int?
  // tipoPago         TipoPago?       @relation(fields: [tipoPagoId], references: [id])
  // voucherId        Int?
  // voucher          Voucher?        @relation(fields: [voucherId], references: [id])
  //legacy fin
}

// model Voucher {
//   id        Int      @id @default(autoincrement())
//   codigo    String   @unique
//   fechaPago DateTime
//   filename  String?
//   path      String?
//   mime      String?

//   inscripciones Inscripcion[]
// }

model Contact {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String
  subject   String
  message   String
  timestamp DateTime @default(now())
}
